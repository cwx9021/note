案例练习,准备:
            rht-vmctl  reset  classroom
            rht-vmctl  reset  server
	        rht-vmctl  reset  desktop
######################################################

案例1:为虚拟机 server 配置以下永久的静态地址参数
– 主机名:server0.example.com
– IP地址:172.25.0.11
– 子网掩码:255.255.255.0
– 默认网关:172.25.0.254
– DNS服务器:172.25.254.254
[root@server0 ~]# echo server0.example.com  >> /etc/hostname
root@server0 ~]# nmcli connection modify 'System eth0' ipv4.method manual ipv4.addresses '172.25.0.11/24 172.25.0.254' connection.autoconnect yes
[root@server0 ~]# vim /etc/resolv.conf 
[root@server0 ~]# cat /etc/resolv.conf 
nameserver 172.25.254.254



案例2：复制、粘贴、移动
 以root用户新建/example/目录，在此目录下新建nsd.txt文件，并进一步完成下列操作

 1）将“I love Study”写入到文件nsd.txt 
[root@server0 ~]# mkdir /example
[root@server0 ~]# touch /example/nsd.txt
[root@server0 ~]# echo I love study >> /example/nsd.txt 
[root@server0 ~]# cat /example/nsd.txt 
I love study

 2）将nsd.txt重命名为mylove.txt
[root@server0 ~]# mv /example/nsd.txt  /example/mylove.txt
[root@server0 ~]# ls /example
mylove.txt
 3）将/etc/passwd、/boot、/etc/group同时拷贝到/example/目录下\
[root@server0 ~]# cp -r /etc/passwd /boot/ /etc/group /example
[root@server0 ~]# ls /example/
boot  group  mylove.txt  passwd


 4）将ifconfig命令的前两行内容，追加写入mylove.txt
[root@server0 ~]# ifconfig | head -2 >> /example/mylove.txt 
[root@server0 ~]# cat /example/mylove.txt 
I love study
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.0.11  netmask 255.255.255.0  broadcast 172.25.0.255


 5）将主机名永久配置文件，拷贝到/example/目录下
[root@server0 ~]# cp -r /etc/hostname /example/
[root@server0 ~]# ls /example/
boot  group  hostname  mylove.txt  passwd

 6）将DNS永久配置文件，拷贝到/example/目录下
[root@server0 ~]# cp -r /etc/resolv.conf  /example/
[root@server0 ~]# ls /example/
boot  group  hostname  mylove.txt  passwd  resolv.conf


 7）将开机自动挂载配置文件，拷贝到/example/目录下
[root@server0 ~]# cp -r /etc/fstab  /example/
[root@server0 ~]# 
[root@server0 ~]# ls /example/
boot  fstab  group  hostname  mylove.txt  passwd  resolv.conf


案例3:在server上操作,（MBR分区模式）规划分区
 添加一块80G的硬盘并规划分区：
   划分2个10G的主分区；1个12G的主分区;1个20G的逻辑分区。
[root@server0 ~]# fdisk /dev/vdc
[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  10G  0 disk 
└─vda1 253:1    0  10G  0 part /
vdb    253:16   0  10G  0 disk 
vdc    253:32   0  80G  0 disk 
├─vdc1 253:33   0  10G  0 part 
├─vdc2 253:34   0  10G  0 part 
├─vdc3 253:35   0  12G  0 part 
├─vdc4 253:36   0   1K  0 part 
└─vdc5 253:37   0  20G  0 part 

   
   

案例4:在server上操作,分区使用

1、案例3中新添加80G硬盘的第一个逻辑分区 		
– 格式化成xfs文件系统，实现该分区开机自动挂载，挂载点为/mnt/xfs
[root@server0 ~]# mkfs.xfs /dev/vdc5
[root@server0 ~]# blkid /dev/vdc5
/dev/vdc5: UUID="f453a576-04c7-4dc7-b3ce-9c8d51421160" TYPE="xfs" 
[root@server0 ~]# mkdir /mnt/xfs
[root@server0 ~]# mount /dev/vdc5 /mnt/xfs/
[root@server0 ~]# df -h
文件系统        容量  已用  可用 已用% 挂载点
/dev/vda1        10G  3.1G  7.0G   31% /
devtmpfs        906M     0  906M    0% /dev
tmpfs           921M   80K  921M    1% /dev/shm
tmpfs           921M   17M  904M    2% /run
tmpfs           921M     0  921M    0% /sys/fs/cgroup
/dev/vdc5        20G   33M   20G    1% /mnt/xfs


2、案例3中新添加80G硬盘的第一个主分区
– 完成开机自动挂载，挂载点/mnt/mypart,文件系统为ext4
[root@server0 ~]# mkfs.ext4 /dev/vdc1
[root@server0 ~]# vim /etc/fstab 
[root@server0 ~]# df -h
文件系统        容量  已用  可用 已用% 挂载点
/dev/vda1        10G  3.1G  7.0G   31% /
devtmpfs        906M     0  906M    0% /dev
tmpfs           921M   80K  921M    1% /dev/shm
tmpfs           921M   17M  904M    2% /run
tmpfs           921M     0  921M    0% /sys/fs/cgroup
/dev/vdc5        20G   33M   20G    1% /mnt/xfs
/dev/vdc1       9.8G   37M  9.2G    1% /mnt/mypart



案例5:虚拟机 server0操作，构建 LVM 存储ys

– 新建一个名为 systemvg 的卷组 
– 在此卷组中创建一个名为 vo 的逻辑卷，大小为8G 
[root@server0 ~]# vgcreate systemvg /dev/vdc3
  Physical volume "/dev/vdc3" successfully created
  Volume group "systemvg" successfully created
[root@server0 ~]# lvcreate -n vo -L 8G systemvg 
  Logical volume "vo" created
[root@server0 ~]# lvs
  LV   VG       Attr       LSize Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-a----- 8.00g          
– 将逻辑卷 vo 格式化为 xfs 文件系统 

– 将逻辑卷 vo 挂载到 /vo 目录，并在此目录下建立一个测试文件 votest.txt，内容为“I AM KING.” 
– 实现逻辑卷vo开机自动挂载到/vo

[root@server0 ~]# mkfs.xfs /dev/systemvg/vofstdf -h
[root@server0 ~]# mkdir /vo
[root@server0 ~]# touch /vo/votest.txt
[root@server0 ~]# vim /etc/fstab 
[root@server0 ~]# echo I AM KING /vo/votest.txt
I AM KING /vo/votest.txt
[root@server0 ~]# df -h
文件系统        容量  已用  可用 已用% 挂载点
/dev/vda1        10G  3.1G  7.0G   31% /
devtmpfs        906M     0  906M    0% /dev
tmpfs           921M   80K  921M    1% /dev/shm
tmpfs           921M   17M  904M    2% /run
tmpfs           921M     0  921M    0% /sys/fs/cgroup
/dev/vdc5        20G   33M   20G    1% /mnt/xfs
/dev/vdc1       9.8G   37M  9.2G    1% /mnt/mypart
[root@server0 ~]# mkfs.xfs /dev/systemvg/vo
mkfs.xfs: /dev/systemvg/vo appears to contain an existing filesystem (xfs).
mkfs.xfs: Use the -f option to force overwrite.
[root@server0 ~]# lsblk
NAME            MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda             253:0    0  10G  0 disk 
└─vda1          253:1    0  10G  0 part /
vdb             253:16   0  10G  0 disk 
vdc             253:32   0  80G  0 disk 
├─vdc1          253:33   0  10G  0 part /mnt/mypart
├─vdc2          253:34   0  10G  0 part 
├─vdc3          253:35   0  12G  0 part 
│ └─systemvg-vo 252:0    0   8G  0 lvm  
├─vdc4          253:36   0   1K  0 part 
└─vdc5          253:37   0  20G  0 part /mnt/xfs
[root@server0 ~]# vim /etc/fstab 
[root@server0 ~]# ls /
bin   dev  example  lib    media  opt   root  sbin  sys  usr  vo
boot  etc  home     lib64  mnt    proc  run   srv   tmp  var
[root@server0 ~]# mount -a
[root@server0 ~]# lsblk
NAME            MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda             253:0    0  10G  0 disk 
└─vda1          253:1    0  10G  0 part /
vdb             253:16   0  10G  0 disk 
vdc             253:32   0  80G  0 disk 
├─vdc1          253:33   0  10G  0 part /mnt/mypart
├─vdc2          253:34   0  10G  0 part 
├─vdc3          253:35   0  12G  0 part 
│ └─systemvg-vo 252:0    0   8G  0 lvm  /vo
├─vdc4          253:36   0   1K  0 part 
└─vdc5          253:37   0  20G  0 part /mnt/xfs
[root@server0 ~]# touch /vo/votest.txt
[root@server0 ~]# echo I AM KING /vo/votest.txt 
I AM KING /vo/votest.txt
[root@server0 ~]# echo I AM KING /vo/votest.txt 
I AM KING /vo/votest.txt
[root@server0 ~]# echo I AM KING  >> /vo/votest.txt 
[root@server0 ~]# cat /vo/votest.txt
I AM KING


案例6:虚拟机 server0操作，构建 LVM 存储(修改PE大小) 1 
– 新的逻辑卷命名为 database，其大小为50个PE的大小，属于 datastore 卷组 

 [root@server0 ~]# vgcreate database /dev/vdc5 /dev/vdc6
	WARNING: xfs signature detected on /dev/vdc5 at offset 0. Wipe it? [y/n] y
	  Wiping xfs signature on /dev/vdc5.
	  Physical volume "/dev/vdc5" successfully created
	  Physical volume "/dev/vdc6" successfully created
	  Volume group "database" successfully created
	[root@server0 ~]# lvcreate -l 50 -n database database
 	 Logical volume "database" created
	[root@server0 ~]# lvs
 	 LV       VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
 	 database database -wi-a----- 200.00m                                             
 	 vo       systemvg -wi-ao----   8.00g                                             
– 在 datastore 卷组中其PE的大小为1M
[root@server0 ~]# vgchange -s 1M database 
 	 Volume group "database" successfully changed
	[root@server0 ~]# vgdisplay database 
  	--- Volume group ---
  	VG Name               database
  	System ID             
  	Format                lvm2
  	Metadata Areas        2
  	Metadata Sequence No  3
  	VG Access             read/write
  	VG Status             resizable
  	MAX LV                0
  	Cur LV                1
  	Open LV               0
  	Max PV                0
  	Cur PV                2
  	Act PV                2
  	VG Size               39.99 GiB
  	PE Size               1.00 MiB
  	Total PE              40952
  	Alloc PE / Size       200 / 200.00 MiB
  	Free  PE / Size       40752 / 39.80 GiB
  	VG UUID               v0PEp1-M
– 使用 EXT4 文件系统对逻辑卷 database 格式化，此逻辑卷应该在开机时自动挂载到 /mnt/database 目录
[root@server0 ~]# mkfs.ext4 /dev/database/database 
 	[root@server0 ~]# mkdir /mnt/database
	[root@server0 ~]# mount /dev/database/database /mnt/database/
	[root@server0 ~]# vim /etc/fstab
	/dev/database/database /mnt/database ext4 defaults 0 0
	[root@server0 ~]# mount -a
	├─vdc5                253:37   0   20G  0 part 
	│ └─database-database 252:1    0  200M  0 lvm  /mnt/database
	└─vdc6                253:38   0   20G  0 part 


案例7:虚拟机 server0操作，扩展逻辑卷

– 将/dev/systemvg/vo逻辑卷的大小扩展到20G



案例8: vim文本编辑器练习，命令模式下的基本操作（重点知识）

 1）将/etc/passwd的前20行，写入到文件/opt/pass20.txt 
 2）将/etc/shadow的前10行,追加写入到文件/opt/pass20.txt 

 3）利用/opt/pass20.txt，进项如下操作：
    – 命令模式下移动光标：键盘上下左右键、Home键、End键
    – 命令模式下行间跳转：到全文的第一行（1G或gg）、到全文的最后一行（G）、到全文的第10行（10G）
    
    – 命令模式下复制、粘贴：
    	 复制1行（yy）、复制3行（3yy）
    	 粘贴到当前行之后（小写p）

    – 命令模式下删除：
    	 删除单个字符（x）
    	 删除到行首（d^）、删除到行尾（d$）
    	 删除1行（dd）、删除3行（3dd）
         
    
    – 命令模式下查找关键词： 
    	 搜索（/word）切换结果（n、N）

    – 补充：在命令模式下大写的C，可以删除光标之后，并且进入输入模式


















