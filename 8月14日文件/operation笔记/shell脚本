2018.8.10                                    SHELL



系统需要安装bash-completion软件包才可以tab
2.数字判断
-eq  等于
-ne   不等于
-gt    大于
-ge    大于等于
-lt    小于
-le    小于等于

文件或目录判断
-e   exist  是否存在
-f   file   是否为文件
-d   directory    是否为目录
-r   read      是否可读
-w   write
-x   execute    
###################################################################
单分支                双分支                             多分支
if (判断) ; then     if (判断)；then          if (判断)；then                        
fi               命令行1                             命令行1
                  else                       elif(判断);then    
                      命令行2                            命令行2
                  fi                         else
                                                          命令行n
                                             fi     
                                              
############################################################################                                                    
循环                                        
for 变量 in 值1  值2 值3                                        
                                             
do                                 
    命令
done 
##################################################################################
#!/bin/bash
read -p "请输入一个正整数：" x
x=${x:-1}
i=1;SUM=0
while [ $i -le $x ]
do
  let SUM+=i   SUM=SUM+i
  let i++
done
  echo "从1到$x的总和是：$SUM"

##########################################################################################

数组 （是一个变量，一个变量可以存多个值） x=(11  22  33  44)
                                   echo ${x[0]}      echo ${x[*]} 全部显示
                                   echo ${x[1]}      echo ${#x[*]}统计个数
                                   echo ${x[2]}
                                   echo ${x[3]}
##############################################################################################

echo ${变量} 
  echo ${变量：：} 截取   
 echo ${变量///}  替换    
echo ${变量#*：}  掐头
 echo ${变量%：*}  去尾


基本正则兼容信强（所有支持正则的软件都支持基本正则）
写的麻烦

扩展正则兼容性差（不是每个软件都支持扩展正则）
写得简单


               sed 's/xml/XML/'  a.txt        //将每行中第一个xml替换为XML
[root@svr5 ~]# sed 's/xml/XML/3' a.txt     //将每行中的第3个xml替换为XML
[root@svr5 ~]# sed 's/xml/XML/g' a.txt     //将所有的xml都替换为XML
[root@svr5 ~]# sed 's/xml//g'     a.txt     //将所有的xml都删除（替换为空串）
[root@svr5 ~]# sed 's#/bin/bash#/sbin/sh#' a.txt  //将/bin/bash替换为/sbin/sh
[root@svr5 ~]# sed '4,7s/^/#/'   a.txt         //将第4~7行注释掉（行首加#号）
[root@svr5 ~]#sed 's/^#an/an/'  a.txt         //解除以#an开头的行的注释（去除行首的#号）



Hello the word
ni hao ma beijing
[root@cwx ~]# sed -r 's/^(.)(.*)(.)$/\3\2\1/' cwx.txt 第一个字与最后一个字母调换
dello the worH
gi hao ma beijinn
[root@cwx ~]# sed -r  's/^(.)(.)(.*)(.)(.)$/\1\4\3\2\5/' cwx.txt 第二个与倒数第二个字母调换
Hrllo the woed
nn hao ma beijiig
##################################################################################

1.自动安装软件vsftpd
2./etc/vsftpd/vsftpd.conf配置文件
  #anon_......
  #anon_........
3自动启动
4.自动开机启动
5.默认的共享路径/var/ftp/pub(修改目录权限)

#!/bin/bash
yum -y install vsftpd &>/dev/null
echo "安装完成下一步"
sed -i 's/^#anon/anon/g' /etc/vsftpd/vsftpd.conf
if [ $? -eq 0 ];then

echo "ok"
systemctl restart vsftpd
systemctl enable vsftpd
fi
chmod 777 /var/ftp/pub
 if [ $? -eq 0 ]; then
  echo "权限更改成功"
fi
############################################################################
找到使用bash作登录Shell的本地用户
列出这些用户的shadow密码记录
按每行“用户名 --> 密码记录”
[root@svr5 ~]# vim ./getupwd.sh  
#/bin/bash
A=$(sed -n '/bash$/s/.*://p' /etc/passwd)             ## 提取符合条件的账号记录
for i in  $A                                         ##遍历账号记录
do
    pass1=$(grep $i /etc/shadow)
    pass2=${pass1#*:}
    pass=${pass2%%:*}
    echo  "$i   --> $pass"
done
###########################################################################
总结知识点：
#sed [选项] '条件指令' 文件
选项:
-n 屏蔽默认输出
-r 支持扩展正则
-i 修改源文件
条件：
行号 4 4,5 4~2 4,+10
/正则/
指令：
p 打印
d 删除
s 替换s/旧/新/g
a 追加
i 插入
c 替换行
H 追加
h 覆盖
G 追加
g 覆盖
#sed -i '$r /etc/hosts' a.txt
   把/etc/hosts内容，导入a.txt的最后一行

set 'w /b.txt' a.txt
  把a.txt内容打开，把所有行另存到/b.txt
set '1,5w /b.txt' a.txt
  把1-5行的a.txt另存到b.txt
######################################################################
            awk:在shell做数据处理


awk  [选项]  ' BEGIN{指令} {指令} END{指令}'  文件

BEGIN{ }	行前处理，读取文件内容前执行，指令执行1次
{ }	逐行处理，读取文件过程中执行，指令执行n次
END{ }	行后处理，读取文件结束后执行，指令执行1次

################################################################################3
要求: 格式化输出passwd文件内容时，要求第一行为列表标题，中间打印用户的名称、UID、家目录信息，最后一行提示一共已处理文本的总行数，如图-1所示。

 awk -F: 'BEGIN{print "用户名  UID   家目录"}{print $1,$3,$6}END{print "输出总行" NR}' /etc/passwd | column -t


########################################################3
awk -F: '$3>1000&&$3<1003' /etc/passwd
awk -F: '$3>1000||$3<10'  /etc/passwd
对

awk -F: '$3>1000||$3<1003' /etc/passwd
awk -F: '$3>1000&&$3<10'  /etc/passwd
错误的


awk -v(shell脚本使用的选项)
awk -F: -v x=$i '$1==x' /etc/shadow
 输出：root:$6$DFCwb/72QRZo3rup$e/p5SkBJw.gKFPVADUkAQlgsAcNZ0ZgKp5IUGlfBGpZMhW5eRg0X4W1l5wX9uwXaRajqWdopdCHBpyuaqdh5N1::0:99999:7:::

#######################################################################
查看登陆的用户
#!/bin/bash

A=`awk -F: '/bash$/{print $1}' /etc/passwd`

for i in $A
do
  grep "^$i" /etc/shadow | awk -F: '{print $1,$2}'
done

#################################################################################
awk过滤数据     sed修改文件


可以统计很多东西
awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}' /var/log/httpd/access_log  | sort -n

##########################################################################3
[root@svr5 ~]# uptime                            //查看CPU负载
[root@svr5 ~]# ifconfig eth0                    //查看网卡流量
[root@svr5 ~]# free                            //查看内存信息
[root@svr5 ~]# df                                //查看磁盘空间
[root@svr5 ~]# wc -l /etc/passwd                //查看计算机账户数量
[root@svr5 ~]# who |wc -l                        //查看登录账户数量
[root@svr5 ~]# rpm -qa |wc -l                    //查看已安装软件包数量

